-----------------------------------------------------
-- MOODSTREAM DATABASE SCRIPT
-- TEAM 1
-- Nicolas Amigo
-- Valerie Melland
-- Dyllan Thomas
-- Hamza Bahaman
-- Omar Bahamdan
-- Roy Zgang
-- Dakota Mitchell
-- Wyatt Johnson
-----------------------------------------------------
----------------------Creation of the database--------------------------

USE MASTER
GO

DROP DATABASE IF EXISTS MOODSTREAM
GO

CREATE DATABASE MOODSTREAM
GO

USE MOODSTREAM
GO

CREATE TABLE "ACTOR" (
		"ACTORID" CHAR(5) NOT NULL,
		"NAME" VARCHAR(50) NOT NULL
	)
GO

CREATE TABLE "ACTOR_X_CONTENT" (
		"ACTORID" CHAR(5) NOT NULL,
		"CONTENTID" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "CONTENT" (
		"CONTENTID" CHAR(5) NOT NULL,
		"NAME" VARCHAR(50) NOT NULL UNIQUE,
		"DESCRIPTION" VARCHAR(10) NOT NULL,
		"RELEASEDATE" DATETIME NOT NULL,
		"PARENTALGUIDANCE" VARCHAR(5) NOT NULL,
		"DIRECTORID" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "CONTENT_X_COUNTRY" (
		"CONTENTID" CHAR(5) NOT NULL,
		"COUNTRYID" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "CONTENT_X_LANGUAGE" (
		"CONTENTID" CHAR(5) NOT NULL,
		"LANGUAGEID" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "CONTENT_X_USER" (
		"CONTENTID" CHAR(5) NOT NULL,
		"USERID" INT NOT NULL
	)
GO

CREATE TABLE "COUNTRY" (
		"COUNTRYID" CHAR(5) NOT NULL,
		"NAME" VARCHAR(35) NOT NULL
	)
GO

CREATE TABLE "DIRECTOR" (
		"DIRECTORID" CHAR(5) NOT NULL,
		"NAME" VARCHAR(50) NOT NULL
	)
GO

CREATE TABLE "EPISODE" (
		"NAME" CHAR(50) NOT NULL,
		"RUNTIME" CHAR(5) NOT NULL,
		"EPISODENUMBER" CHAR(5) NOT NULL,
		"CONTENTID" CHAR(5) NOT NULL,
		"SEASONNUMBER" INT NOT NULL
	)
GO

CREATE TABLE "GENRE" (
		"GENREID" CHAR(5) NOT NULL,
		"NAME" VARCHAR(25) NOT NULL UNIQUE,
		"DESCRIPTION" VARCHAR(500) NOT NULL
	)
GO

CREATE TABLE "GENRE_X_CONTENT" (
		"GENREID" CHAR(5) NOT NULL,
		"CONTENTID" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "LANGUAGE" (
		"LANGUAGEID" CHAR(5) NOT NULL,
		"NAME" VARCHAR(25) NOT NULL
	)
GO

CREATE TABLE "MOOD" (
		"MOODID" CHAR(5) NOT NULL,
		"NAME" VARCHAR(35) NOT NULL UNIQUE
	)
GO

CREATE TABLE "MOVIE" (
		"RUNTIME" INT NOT NULL,
		"CONTENTID" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "PLAN" (
		"NAME" CHAR(5) NOT NULL,
		"PRICE" DECIMAL(5,2) NOT NULL,
		"PLATFORMID" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "PLATFORMS" (
		"PLATFORMID" CHAR(5) NOT NULL,
		"NAME" VARCHAR(25) NOT NULL
	)
GO

CREATE TABLE "PLATFORM_X_CONTENT" (
		"PLATFORMID" CHAR(5) NOT NULL,
		"CONTENTID" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "PRODUCER" (
		"PRODUCERID" CHAR(5) NOT NULL,
		"NAME" VARCHAR(50) NOT NULL
	)
GO

CREATE TABLE "PRODUCER_X_CONTENT" (
		"PRODUCERID" CHAR(5) NOT NULL,
		"CONTENTID" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "REVIEW" (
		"REVIEWID" INT IDENTITY(1,1) NOT NULL,
		"SUBJECT" VARCHAR(100) NOT NULL,
		"DESCRIPTION" VARCHAR(1000) NOT NULL,
		"RATE" INT NOT NULL,
		"CONTENTID" CHAR(5) NOT NULL,
		"USERID" INT NOT NULL
	)
GO

CREATE TABLE "SEASON" (
		"AMOUNTEPISODES" INT NOT NULL,
		"RELEASEDATE" DATETIME NOT NULL,
		"SEASONNUMBER" INT NOT NULL,
		"CONTENTID" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "SERIES_TV" (
		"CONTENTID" CHAR(5) NOT NULL
	)
GO

CREATE TABLE "USERS" (
		"USERID" INT IDENTITY(1,1) NOT NULL,
		"NAME" VARCHAR(50) NOT NULL,
		"EMAIL" VARCHAR(75) NOT NULL UNIQUE,
		"PHONENUMBER" VARCHAR(25) NOT NULL UNIQUE,
		"PASSWORD" VARCHAR(30) NOT NULL,
		"DATEOFBIRTH" DATE NOT NULL,
		"USERNAME" VARCHAR(25) NOT NULL UNIQUE,
		"MOODID" CHAR(5) NOT NULL
	)
GO

ALTER TABLE "ACTOR" ADD CONSTRAINT "ACTOR_PK" PRIMARY KEY
	("ACTORID")
GO

ALTER TABLE "ACTOR_X_CONTENT" ADD CONSTRAINT "ACTOR_X_CONTENT_PK" PRIMARY KEY
	("ACTORID",
	 "CONTENTID")
GO

ALTER TABLE "CONTENT" ADD CONSTRAINT "CONTENT_PK" PRIMARY KEY
	("CONTENTID")
GO

ALTER TABLE "CONTENT_X_COUNTRY" ADD CONSTRAINT "CONTENT_X_COUNTRY_PK" PRIMARY KEY
	("CONTENTID",
	 "COUNTRYID")
GO

ALTER TABLE "CONTENT_X_LANGUAGE" ADD CONSTRAINT "CONTENT_X_LANGUAGE_PK" PRIMARY KEY
	("CONTENTID",
	 "LANGUAGEID")
GO

ALTER TABLE "CONTENT_X_USER" ADD CONSTRAINT "CONTENT_X_USER_PK" PRIMARY KEY
	("CONTENTID",
	 "USERID")
GO

ALTER TABLE "COUNTRY" ADD CONSTRAINT "COUNTRY_PK" PRIMARY KEY
	("COUNTRYID")
GO

ALTER TABLE "DIRECTOR" ADD CONSTRAINT "DIRECTOR_PK" PRIMARY KEY
	("DIRECTORID")
GO

ALTER TABLE "EPISODE" ADD CONSTRAINT "EPISODE_PK" PRIMARY KEY
	("CONTENTID",
	 "EPISODENUMBER")
GO

ALTER TABLE "GENRE" ADD CONSTRAINT "GENRE_PK" PRIMARY KEY
	("GENREID")
GO

ALTER TABLE "GENRE_X_CONTENT" ADD CONSTRAINT "GENRE_X_CONTENT_PK" PRIMARY KEY
	("GENREID",
	 "CONTENTID")
GO

ALTER TABLE "LANGUAGE" ADD CONSTRAINT "LANGUAGE_PK" PRIMARY KEY
	("LANGUAGEID")
GO

ALTER TABLE "MOOD" ADD CONSTRAINT "MOOD_PK" PRIMARY KEY
	("MOODID")
GO

ALTER TABLE "MOVIE" ADD CONSTRAINT "MOVIE_PK" PRIMARY KEY
	("CONTENTID")
GO

ALTER TABLE "PLAN" ADD CONSTRAINT "PLAN_PK" PRIMARY KEY
	("PLATFORMID",
	 "NAME")
GO

ALTER TABLE "PLATFORMS" ADD CONSTRAINT "PLATFORM_PK" PRIMARY KEY
	("PLATFORMID")
GO

ALTER TABLE "PLATFORM_X_CONTENT" ADD CONSTRAINT "PLATFORM_X_CONTENT_PK" PRIMARY KEY
	("PLATFORMID",
	 "CONTENTID")
GO

ALTER TABLE "PRODUCER" ADD CONSTRAINT "PRODUCER_PK" PRIMARY KEY
	("PRODUCERID")
GO

ALTER TABLE "PRODUCER_X_CONTENT" ADD CONSTRAINT "PRODUCER_X_CONTENT_PK" PRIMARY KEY
	("PRODUCERID",
	 "CONTENTID")
GO

ALTER TABLE "REVIEW" ADD CONSTRAINT "REVIEW_PK" PRIMARY KEY
	("REVIEWID")
GO

ALTER TABLE "SEASON" ADD CONSTRAINT "SEASON_PK" PRIMARY KEY
	("CONTENTID",
	 "SEASONNUMBER")
GO

ALTER TABLE "SERIES_TV" ADD CONSTRAINT "SERIES_TV_PK" PRIMARY KEY
	("CONTENTID")
GO

ALTER TABLE "USERS" ADD CONSTRAINT "USER_PK" PRIMARY KEY
	("USERID")
GO

ALTER TABLE "ACTOR_X_CONTENT" ADD CONSTRAINT "ACTOR_CONTENT_FK" FOREIGN KEY
	("ACTORID")
	REFERENCES "ACTOR"
	("ACTORID")
GO

ALTER TABLE "ACTOR_X_CONTENT" ADD CONSTRAINT "ACTOR_CONTENT_FK1" FOREIGN KEY
	("CONTENTID")
	REFERENCES "CONTENT"
	("CONTENTID")
GO

ALTER TABLE "CONTENT" ADD CONSTRAINT "CONTENT_DIRECTOR_FK" FOREIGN KEY
	("DIRECTORID")
	REFERENCES "DIRECTOR"
	("DIRECTORID")
GO

ALTER TABLE "CONTENT_X_COUNTRY" ADD CONSTRAINT "CONTENT_COUNTRY_FK" FOREIGN KEY
	("CONTENTID")
	REFERENCES "CONTENT"
	("CONTENTID")
GO

ALTER TABLE "CONTENT_X_COUNTRY" ADD CONSTRAINT "CONTENT_COUNTRY_FK1" FOREIGN KEY
	("COUNTRYID")
	REFERENCES "COUNTRY"
	("COUNTRYID")
GO

ALTER TABLE "CONTENT_X_LANGUAGE" ADD CONSTRAINT "CONTENT_LANGUAGE_FK" FOREIGN KEY
	("CONTENTID")
	REFERENCES "CONTENT"
	("CONTENTID")
GO

ALTER TABLE "CONTENT_X_LANGUAGE" ADD CONSTRAINT "CONTENT_LANGUAGE_FK1" FOREIGN KEY
	("LANGUAGEID")
	REFERENCES "LANGUAGE"
	("LANGUAGEID")
GO

ALTER TABLE "CONTENT_X_USER" ADD CONSTRAINT "CONTENT_USER_FK" FOREIGN KEY
	("CONTENTID")
	REFERENCES "CONTENT"
	("CONTENTID")
GO

ALTER TABLE "CONTENT_X_USER" ADD CONSTRAINT "CONTENT_USER_FK1" FOREIGN KEY
	("USERID")
	REFERENCES "USERS"
	("USERID")
GO

ALTER TABLE "EPISODE" ADD CONSTRAINT "EPISODE_SEASON_FK" FOREIGN KEY
	("CONTENTID",
	 "SEASONNUMBER")
	REFERENCES "SEASON"
	("CONTENTID",
	 "SEASONNUMBER")
GO

ALTER TABLE "EPISODE" ADD CONSTRAINT "EPISODE_SERIES_TV_FK" FOREIGN KEY
	("CONTENTID")
	REFERENCES "SERIES_TV"
	("CONTENTID")
GO

ALTER TABLE "GENRE_X_CONTENT" ADD CONSTRAINT "GENRE_CONTENT_FK" FOREIGN KEY
	("GENREID")
	REFERENCES "GENRE"
	("GENREID")
GO

ALTER TABLE "GENRE_X_CONTENT" ADD CONSTRAINT "GENRE_CONTENT_FK1" FOREIGN KEY
	("CONTENTID")
	REFERENCES "CONTENT"
	("CONTENTID")
GO

ALTER TABLE "MOVIE" ADD CONSTRAINT "MOVIE_CONTENT_FK" FOREIGN KEY
	("CONTENTID")
	REFERENCES "CONTENT"
	("CONTENTID")
GO

ALTER TABLE "PLAN" ADD CONSTRAINT "PLAN_PLATFORM_FK" FOREIGN KEY
	("PLATFORMID")
	REFERENCES "PLATFORMS"
	("PLATFORMID")
GO

ALTER TABLE "PLATFORM_X_CONTENT" ADD CONSTRAINT "PLATFORM_CONTENT_FK" FOREIGN KEY
	("PLATFORMID")
	REFERENCES "PLATFORMS"
	("PLATFORMID")
GO

ALTER TABLE "PLATFORM_X_CONTENT" ADD CONSTRAINT "PLATFORM_CONTENT_FK1" FOREIGN KEY
	("CONTENTID")
	REFERENCES "CONTENT"
	("CONTENTID")
GO

ALTER TABLE "PRODUCER_X_CONTENT" ADD CONSTRAINT "PRODUCER_CONTENT_FK" FOREIGN KEY
	("PRODUCERID")
	REFERENCES "PRODUCER"
	("PRODUCERID")
GO

ALTER TABLE "PRODUCER_X_CONTENT" ADD CONSTRAINT "PRODUCER_CONTENT_FK1" FOREIGN KEY
	("CONTENTID")
	REFERENCES "CONTENT"
	("CONTENTID")
GO

ALTER TABLE "REVIEW" ADD CONSTRAINT "REVIEW_CONTENT_FK" FOREIGN KEY
	("CONTENTID")
	REFERENCES "CONTENT"
	("CONTENTID")
GO

ALTER TABLE "REVIEW" ADD CONSTRAINT "REVIEW_USER_FK" FOREIGN KEY
	("USERID")
	REFERENCES "USERS"
	("USERID")
GO

ALTER TABLE "SEASON" ADD CONSTRAINT "SEASON_SERIES_TV_FK" FOREIGN KEY
	("CONTENTID")
	REFERENCES "SERIES_TV"
	("CONTENTID")
GO

ALTER TABLE "SERIES_TV" ADD CONSTRAINT "SERIES_TV_CONTENT_FK" FOREIGN KEY
	("CONTENTID")
	REFERENCES "CONTENT"
	("CONTENTID")
GO

ALTER TABLE "USERS" ADD CONSTRAINT "USER_MOOD_FK" FOREIGN KEY
	("MOODID")
	REFERENCES "MOOD"
	("MOODID")
GO

ALTER TABLE "REVIEW" ADD CONSTRAINT "RATE_CK" CHECK ((RATE >= 0 AND RATE <= 10))

ALTER TABLE "USERS" ADD CONSTRAINT "EMAIL_CK" CHECK (([EMAIL] like '%@%'))
GO

---- Functions ----
CREATE OR ALTER FUNCTION dbo.calculateRating(@CONTENTID CHAR(5)) RETURNS INTEGER
AS BEGIN
  RETURN (SELECT AVG(RATE) FROM REVIEW WHERE CONTENTID=@CONTENTID)
END
GO
ALTER TABLE "CONTENT" ADD "RATING" AS dbo.calculateRating(CONTENTID);
GO

CREATE OR ALTER FUNCTION dbo.calculateEpisodes(@CONTENTID CHAR(5)) RETURNS INTEGER
AS BEGIN
  RETURN (SELECT COUNT(*) FROM EPISODE WHERE CONTENTID=@CONTENTID)
END
GO
ALTER TABLE "CONTENT" ADD "NUMBEREPISODES" AS dbo.calculateEpisodes(CONTENTID);
GO 

CREATE OR ALTER FUNCTION dbo.calculateSeasons(@CONTENTID CHAR(5)) RETURNS INTEGER
AS BEGIN
  RETURN (SELECT COUNT(*) FROM SEASON WHERE CONTENTID=@CONTENTID)
END
GO
ALTER TABLE "CONTENT" ADD "NUMBERSEASONS" AS dbo.calculateSeasons(CONTENTID);
GO 

CREATE OR ALTER FUNCTION dbo.bestContentByGenre(@genreName VARCHAR(25)) RETURNS TABLE
AS 	
	RETURN(SELECT NAME, RATING FROM CONTENT C INNER JOIN GENRE_X_CONTENT GC ON C.CONTENTID=GC.CONTENTID 
	WHERE GC.GENREID=(SELECT GENREID FROM GENRE WHERE NAME=@genreName) ORDER BY RATING DESC)
GO

CREATE OR ALTER FUNCTION dbo.bestContentByActor(@actorName VARCHAR(50)) RETURNS TABLE
AS 	
	RETURN(SELECT NAME, RATING FROM CONTENT C INNER JOIN ACTOR_X_CONTENT AC ON C.CONTENTID=AC.CONTENTID 
	WHERE AC.ACTORID=(SELECT ACTORID FROM ACTOR WHERE NAME=@actorName) ORDER BY RATING DESC)
GO

CREATE OR ALTER FUNCTION dbo.bestContentByDirector(@directorName VARCHAR(50)) RETURNS TABLE
AS 	
	RETURN(SELECT NAME, RATING FROM CONTENT WHERE DIRECTORID=(SELECT DIRECTORID FROM DIRECTOR WHERE NAME=@directorName) ORDER BY RATING DESC)
GO

CREATE OR ALTER FUNCTION dbo.bestContentByPlatform(@platformName VARCHAR(25)) RETURNS TABLE
AS 	
	RETURN(SELECT NAME, RATING FROM CONTENT C INNER JOIN PLATFORM_X_CONTENT PC ON C.CONTENTID=PC.CONTENTID 
	WHERE PC.PLATFORMID=(SELECT PLATFORMID FROM PLATFORMS WHERE NAME=@platformName) ORDER BY RATING DESC)
GO

CREATE OR ALTER FUNCTION dbo.contentPlatforms(@contentName VARCHAR(50)) RETURNS TABLE
AS
	 RETURN(SELECT P.NAME FROM PLATFORM_X_CONTENT PC 
	 INNER JOIN PLATFORMS P ON PC.PLATFORMID=P.PLATFORMID 
	 WHERE PC.CONTENTID=(SELECT CONTENTID FROM CONTENT WHERE NAME=@contentName))
GO

---- Procedures ----
CREATE OR ALTER PROCEDURE sign_up @name VARCHAR(50), @email VARCHAR(75), @phonenumber VARCHAR(25), @password VARCHAR(30), @dateOfBirth DATE, @username VARCHAR(25), @moodName VARCHAR(35) 
AS
BEGIN TRY
	BEGIN TRANSACTION
		IF(EXISTS(SELECT * FROM USERS WHERE USERNAME = @username))
			RAISERROR('That user already exists, choose another username', 16,1)
		IF(EXISTS(SELECT * FROM USERS WHERE EMAIL = @email))
			RAISERROR('That email already exists, choose another email', 16,1)
		IF(EXISTS(SELECT * FROM USERS WHERE PHONENUMBER = @phonenumber))
			RAISERROR('That phone number already exists, choose another number', 16,1)
		DECLARE @moodID CHAR(5)
		SET @moodID = (SELECT MOODID FROM MOOD WHERE NAME = @moodName)
		INSERT INTO USERS VALUES(@name, @email, @phonenumber, @password, @dateOfBirth, @username, @moodID)
	COMMIT TRANSACTION
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
END CATCH
RETURN;
GO

CREATE OR ALTER PROCEDURE delete_user @username VARCHAR(25)
AS
BEGIN TRY
	BEGIN TRANSACTION
		IF @username NOT IN (SELECT USERNAME FROM USERS)
			RAISERROR('That user does not exist', 16,1)
		DELETE FROM USERS WHERE USERNAME=@username
	COMMIT TRANSACTION
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
END CATCH
RETURN;
GO

CREATE OR ALTER PROCEDURE add_content_list @username VARCHAR(50), @contentName VARCHAR(50)
AS
BEGIN TRY
	BEGIN TRANSACTION
		IF @username NOT IN (SELECT USERNAME FROM USERS)
			RAISERROR('That user does not exist', 16,1)
		IF @contentName NOT IN (SELECT NAME FROM CONTENT)
			RAISERROR('That content does not exit', 16,1)
		DECLARE @userID INT
		DECLARE @contentID CHAR(5)
		SET @userID = (SELECT USERID FROM USERS WHERE USERNAME=@username)
		SET @contentID = (SELECT CONTENTID FROM CONTENT WHERE NAME=@contentName)
		INSERT INTO CONTENT_X_USER VALUES(@contentID, @userID)
	COMMIT TRANSACTION
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
END CATCH
RETURN;
GO

CREATE OR ALTER PROCEDURE update_mood_user @username VARCHAR(50), @newMood VARCHAR(35)
AS
BEGIN TRY
	BEGIN TRANSACTION
		DECLARE @userID INT
		SET @userID = (SELECT USERID FROM USERS WHERE USERNAME=@username)
		DECLARE @moodID CHAR(5)
		SET @moodID = (SELECT MOODID FROM MOOD WHERE NAME = @newMood)
		UPDATE USERS SET MOODID=@moodID WHERE USERID=@userID
	COMMIT TRANSACTION
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
END CATCH
RETURN;
GO

CREATE OR ALTER PROCEDURE add_review @subject VARCHAR(100), @description VARCHAR(1000), @rate INT, @contentName VARCHAR(50), @username VARCHAR(50)
AS
BEGIN TRY
	BEGIN TRANSACTION
		DECLARE @userID INT
		DECLARE @contentID CHAR(5)
		SET @userID = (SELECT USERID FROM USERS WHERE USERNAME=@username)
		SET @contentID = (SELECT CONTENTID FROM CONTENT WHERE NAME=@contentName)
		INSERT INTO REVIEW VALUES(@subject, @description, @rate, @contentID, @userID)
	COMMIT TRANSACTION
END TRY
BEGIN CATCH
	ROLLBACK TRANSACTION
END CATCH
RETURN;
GO

-- PASSWORDS??	
-- IMAGES??
-- AGE CONSTRAINT??
-- PLATFORMS ORDER BY PRICE
-- CAMBIAR NOMBRE TABLA USERS

